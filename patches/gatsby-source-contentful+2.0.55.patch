diff --git a/node_modules/gatsby-source-contentful/normalize.js b/node_modules/gatsby-source-contentful/normalize.js
index d3a17c4..0caac4f 100644
--- a/node_modules/gatsby-source-contentful/normalize.js
+++ b/node_modules/gatsby-source-contentful/normalize.js
@@ -199,6 +199,7 @@ function prepareTextNode(node, key, text, createNodeId) {
 }
 
 function prepareRichTextNode(node, key, content, createNodeId) {
+  richTextOneLevel(content);
   const str = stringify(content);
   const richTextNode = Object.assign({}, content, {
     id: createNodeId(`${node.id}${key}RichTextNode`),
@@ -469,3 +470,76 @@ exports.createAssetNodes = ({
     createNode(assetNode);
   });
 };
+
+function mutateFieldsToOnlySlug(nodeToMutate, item, itemIndex, currentSlug) {
+  const nodeToMutateFields = nodeToMutate.fields;
+
+  if (
+    Object.prototype.hasOwnProperty.call(nodeToMutateFields, "slug") &&
+    nodeToMutateFields.slug !== currentSlug
+  ) {
+    const { slug } = nodeToMutateFields;
+    nodeToMutate.fields = {
+      slug
+    };
+  } else {
+    // If no slug or if reference to same content set to null
+    if (item && item.content) {
+      item.content.splice(itemIndex, 1);
+    }
+  }
+}
+
+function mutateLinkReferenceIfNeeded(node, item, i) {
+  if (!node.data.target.sys.contentType) return;
+  const embeddedContentModel = node.data.target.sys.contentType.sys.id;
+
+  if (embeddedContentModel === "assemblyCta") {
+    const contentModelFields = node.data.target.fields;
+    const fieldLink =
+      contentModelFields.cta["en-GB"][0].fields.link["en-GB"][0];
+    return mutateFieldsToOnlySlug(fieldLink, item, i);
+  }
+}
+
+function richTextOneLevel(content) {
+  Object.keys(content).forEach(k => {
+    const item = content[k];
+
+    if (Array.isArray(item)) {
+      Object.keys(item).forEach((ik, i) => {
+        const rtItem = item[ik];
+
+        if (
+          Object.prototype.hasOwnProperty.call(rtItem, "nodeType") &&
+          rtItem.nodeType === "embedded-entry-block"
+        ) {
+          mutateLinkReferenceIfNeeded(rtItem, item, i);
+        }
+        checkRichTextContent(rtItem);
+      });
+    }
+  });
+}
+
+const checkRichTextContent = rtContent => {
+  const hasContent = content =>
+    Object.prototype.hasOwnProperty.call(content, "content") &&
+    Array.isArray(content.content) &&
+    content.content.length > 0;
+
+  if (hasContent(rtContent)) {
+    rtContent.content.forEach((contentNode, ii) => {
+      if (
+        Object.prototype.hasOwnProperty.call(contentNode, "nodeType") &&
+        contentNode.nodeType === "entry-hyperlink"
+      ) {
+        // fields needed just slug for now
+        mutateFieldsToOnlySlug(contentNode.data.target, contentNode, ii);
+      } else if (hasContent(contentNode)) {
+        // Check for deeper richtext content, e.g. Lists inside paragraphs
+        checkRichTextContent(contentNode);
+      }
+    });
+  }
+};
