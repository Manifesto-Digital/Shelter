diff --git a/node_modules/gatsby-source-contentful/cache-image.js b/node_modules/gatsby-source-contentful/cache-image.js
index 4f2ce3d..25a9fd2 100644
--- a/node_modules/gatsby-source-contentful/cache-image.js
+++ b/node_modules/gatsby-source-contentful/cache-image.js
@@ -79,7 +79,9 @@ function () {
     return absolutePath;
   });
 
-  return function cacheImage(_x, _x2, _x3) {
+  function cacheImage(_x, _x2, _x3) {
     return _cacheImage.apply(this, arguments);
-  };
+  }
+
+  return cacheImage;
 }();
\ No newline at end of file
diff --git a/node_modules/gatsby-source-contentful/normalize.js b/node_modules/gatsby-source-contentful/normalize.js
index 66a09d2..95777de 100644
--- a/node_modules/gatsby-source-contentful/normalize.js
+++ b/node_modules/gatsby-source-contentful/normalize.js
@@ -199,6 +199,7 @@ function prepareTextNode(node, key, text, createNodeId) {
 }
 
 function prepareStructuredTextNode(node, key, content, createNodeId) {
+  richTextOneLevel(content);
   const str = stringify(content);
   const structuredTextNode = Object.assign({}, content, {
     id: createNodeId(`${node.id}${key}RichTextNode`),
@@ -469,3 +470,32 @@ exports.createAssetNodes = ({
     createNode(assetNode);
   });
 };
+
+function richTextOneLevel(content) {
+  Object.keys(content).forEach(k => {
+    if (Array.isArray(content[k])) {
+      Object.keys(content[k]).forEach(ik => {
+        const inside = content[k][ik];
+
+        if (Object.prototype.hasOwnProperty.call(inside, 'content') && Array.isArray(inside.content)) {
+          inside.content.forEach((node, i) => {
+            if (Object.prototype.hasOwnProperty.call(node, 'nodeType') && node.nodeType === 'entry-hyperlink') {
+              // fields needed just slug for now
+              const targetFields = node.data.target.fields;
+
+              if (targetFields && Object.prototype.hasOwnProperty.call(targetFields, 'slug')) {
+                const slug = targetFields.slug;
+                node.data.target.fields = {
+                  slug
+                };
+              } else {
+                // If no slug lets delete so no max loop happens
+                inside.content.splice(i, 1);
+              }
+            }
+          });
+        }
+      });
+    }
+  });
+}
\ No newline at end of file
diff --git a/node_modules/gatsby-source-contentful/src/normalize.js b/node_modules/gatsby-source-contentful/src/normalize.js
index 86604ef..833e6e5 100644
--- a/node_modules/gatsby-source-contentful/src/normalize.js
+++ b/node_modules/gatsby-source-contentful/src/normalize.js
@@ -194,6 +194,7 @@ function prepareTextNode(node, key, text, createNodeId) {
 }
 
 function prepareStructuredTextNode(node, key, content, createNodeId) {
+  richTextOneLevel(content);
   const str = stringify(content)
   const structuredTextNode = {
     ...content,
@@ -546,3 +547,37 @@ exports.createAssetNodes = ({
     createNode(assetNode)
   })
 }
+function richTextOneLevel(content) {
+  Object.keys(content).forEach(k => {
+    if (Array.isArray(content[k])) {
+      Object.keys(content[k]).forEach(ik => {
+        const inside = content[k][ik];
+        if (
+          Object.prototype.hasOwnProperty.call(inside, 'content') &&
+          Array.isArray(inside.content)
+        ) {
+          inside.content.forEach((node, i) => {
+            if (
+              Object.prototype.hasOwnProperty.call(node, 'nodeType') &&
+              node.nodeType === 'entry-hyperlink'
+            ) {
+              // fields needed just slug for now
+              const targetFields = node.data.target.fields;
+
+              if (
+                targetFields &&
+                Object.prototype.hasOwnProperty.call(targetFields, 'slug')
+              ) {
+                const { slug } = targetFields;
+                node.data.target.fields = { slug };
+              } else {
+                // If no slug lets delete so no max loop happens
+                inside.content.splice(i, 1);
+              }
+            }
+          });
+        }
+      });
+    }
+  });
+}
